Error Handling:
---------------

3 types of Errors:
--------------------
1. Syntax error -

When complex finds something wrong with our program,it throws a syntax error

2. runtime error - 

A logical error or a bug occurs when a program compiles and round but does the wrong thing.

- Message delivered wrongly
- Wrong time of chats being displayed
- Incorrect redirects!

3. logical error -

- Java may sometimes encounter an error while the program is running.
- These are also called Exceptions!
- These are encountered due to circumstances like bad input and (or) resource constraints.


* Note * :

- Syntax errors and logical errors are encountered by the programmers, whereas Run-time errors are encountered by the users.

Exceptions:
-----------

- Exceptions are primarily used to indicate the occurence of an abnormal situation such as runtime error.

1. Checked Exception: compile time exceptions (handled by compiler)
2. Unchecked Exception: Runtime exceptions

1. Exception Hierarchy:
-----------------------

- Java has a robust exception handling mechanism built into the language, organized into a hierarchy:

- Throwable: The base class for all errors and exceptions in Java.

-> Error: Represents serious problems that applications should not catch (e.g., OutOfMemoryError).

-> Exception: Represents conditions that a reasonable application might want to catch.

->> RuntimeException: Represents exceptions that can occur during the program’s runtime and are not required to be declared (e.g., NullPointerException, ArrayIndexOutOfBoundsException).

->> Checked Exceptions: These are exceptions that the application must handle (e.g., IOException, SQLException).


2. Try-Catch-Finally Block:
---------------------------

The basic syntax for handling exceptions involves a try-catch-finally block:

try {
    // Code that may throw an exception
} catch (ExceptionType1 e1) {
    // Code to handle ExceptionType1
} catch (ExceptionType2 e2) {
    // Code to handle ExceptionType2
} finally {
    // Code that will execute regardless of an exception being thrown or not
}


- try Block: Contains the code that might throw an exception.
- catch Block: Catches and handles the exception. You can have multiple catch blocks to handle different types of exceptions.
- finally Block: Executes after the try block, regardless of whether an exception was thrown or not. It’s often used for cleanup code like closing file streams.